---
import Layout from '../layouts/Layout.astro'
import tinyTiger from '../data/tiny-tiger.json'

const renderList = (items: any[], prefix = '', options: any = {}) => {
  return items
    .map((item, i) => {
      const symbol = i === items.length - 1 ? '╰' : '├'
      let link
      if (options.addPlayButton) {
        link = `<a href="#" class="track-link" data-track-index="${i}">${item.name} <span class="track-play">▶</span></a>`
      } else {
        link = item.url
          ? `<a href="${item.url}" target="_blank">${item.name}</a>`
          : item.name
      }
      const desc = item.description ? ` - ${item.description}` : ''
      return `${prefix}${symbol} ${link}${desc}`
    })
    .join('\n')
}

const introContent = `tiny tiger - demos / unreleased tracks

⚠️  please don't share this page

╭ tracks
${renderList(tinyTiger, '', { addPlayButton: true }).replace(/target="_blank"/g, '')}

<a href="/">← back home</a>`
---

<Layout title="tiny tiger">
  <main class="tre-d">
    <header>
      <img-3d class="me"></img-3d>
      <p-3d
        three-d-text={introContent.replace(/<[^>]*>/g, '')}
        set:html={introContent}
      />
    </header>
  </main>

  <script is:inline define:vars={{ tinyTigerData: tinyTiger }}>
    window.tinyTigerData = tinyTigerData
  </script>

  <script>
    import GlobalMusicPlayer from '../scripts/GlobalMusicPlayer'

    // Declare window.tinyTigerData type
    declare global {
      interface Window {
        tinyTigerData: any
      }
    }

    const player = new GlobalMusicPlayer(window.tinyTigerData)
    player.start()

    // Music player for tiny tiger tracks
    const trackLinks = document.querySelectorAll('.track-link')

    trackLinks.forEach((link) => {
      link.addEventListener('click', (e) => {
        e.preventDefault()
        const trackIndexAttr = link.getAttribute('data-track-index')
        if (!trackIndexAttr) return

        const trackIndex = parseInt(trackIndexAttr)
        const playIcon = link.querySelector('.track-play')
        if (!playIcon) return

        if (player.isPlaying && player.currentTrack === trackIndex) {
          // Pause current track
          player.pause()
          playIcon.textContent = '▶'
        } else {
          // Stop previous track
          if (player.isPlaying) {
            const prevLink = document.querySelector(
              `.track-link[data-track-index="${player.currentTrack}"]`
            )
            if (prevLink) {
              const prevPlayIcon = prevLink.querySelector('.track-play')
              if (prevPlayIcon) {
                prevPlayIcon.textContent = '▶'
              }
            }
          }

          // Play new track
          player.currentTrack = trackIndex
          player.loadTrack(trackIndex)
          player.play()
          playIcon.textContent = '⏸'
        }
      })
    })
  </script>
</Layout>
