---
import Layout from '../layouts/Layout.astro'
import currentWork from '../data/current-work.json'
import previous from '../data/previous.json'
import art from '../data/art.json'
import talks from '../data/talks.json'
import projectsList from '../data/projects-list.json'
import openSource from '../data/open-source.json'
import hacks from '../data/hacks.json'
import security from '../data/security.json'

const renderList = (items: any[], prefix = '', options: any = {}) => {
  return items
    .map((item, i) => {
      const symbol = i === items.length - 1 ? '╰' : '├'
      let link
      if (options.addPlayButton) {
        link = `<a href="#" class="track-link" data-track-index="${i}">${item.name} <span class="track-play">▶</span></a>`
      } else if (options.addVideoButton && item.videoId) {
        const aspectRatio = item.aspectRatio || '16 / 9'
        const videoContainer = `<div class="inline-video" data-video-index="${i}" style="display: none;"><iframe class="youtube-iframe" style="aspect-ratio: ${aspectRatio};" src="https://www.youtube.com/embed/${item.videoId}?autoplay=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe></div>`
        link = `<a href="#" class="video-link" data-video-index="${i}">${item.name} <span class="video-toggle">▶</span></a>${videoContainer}`
      } else {
        link = item.url
          ? `<a href="${item.url}" target="_blank">${item.name}</a>`
          : item.name
      }
      const desc = item.description ? ` - ${item.description}` : ''
      return `${prefix}${symbol} ${link}${desc}`
    })
    .join('\n')
}

const introContent = `hi, my name is piérre reimertz.
i'm a developer, designer and occasional musician.

╭ co-founder / cto at <a href="https://hifilabs.co" target="_blank">hifi labs</a>
${renderList(currentWork)}

prev ╮
${renderList(previous, '     ')}

art ╮
${renderList(art, '    ')}

talks ╮
${renderList(talks, '      ', { addVideoButton: true })}

projects ╮
${renderList(projectsList, '         ')}

╭ open-source
${renderList(openSource)}

hacks ╮
${renderList(hacks, '      ')}

security ╮
${renderList(security, '         ')}

╭ connect
├ <a href="http://github.com/reimertz" target="_blank">github</a>
├ <a href="http://x.com/reimertz" target="_blank">x</a>
├ <a href="https://www.linkedin.com/in/reimertz" target="_blank">linkedin</a>
╰ <a href="mailto:pierre.reimertz@gmail.com">email</a>`
---

<Layout title="reimertz.co">
  <all-my-secret-api-keys></all-my-secret-api-keys>
  <main class="tre-d">
    <header>
      <img-3d class="me"></img-3d>
      <p-3d
        three-d-text={introContent.replace(/<[^>]*>/g, '')}
        set:html={introContent}
      />
    </header>
  </main>

  <script>
    // YouTube inline video for talks
    const videoLinks = document.querySelectorAll('.video-link')

    videoLinks.forEach((link) => {
      link.addEventListener('click', (e) => {
        e.preventDefault()
        const videoIndex = link.getAttribute('data-video-index')
        if (!videoIndex) return
        const toggle = link.querySelector('.video-toggle')
        if (!toggle) return
        const videoContainer = document.querySelector(
          `.inline-video[data-video-index="${videoIndex}"]`
        ) as HTMLElement | null
        if (!videoContainer) return

        // Toggle video
        if (
          videoContainer.style.display === 'none' ||
          !videoContainer.style.display
        ) {
          // Close other videos first
          document.querySelectorAll('.inline-video').forEach((v) => {
            if (v !== videoContainer) {
              const vElement = v as HTMLElement
              vElement.style.display = 'none'
              const oldIframe = v.querySelector(
                'iframe'
              ) as HTMLIFrameElement | null
              if (oldIframe) {
                const oldSrc = oldIframe.src
                oldIframe.src = ''
                oldIframe.src = oldSrc.replace('?autoplay=1', '?autoplay=0')
              }
            }
          })
          document.querySelectorAll('.video-toggle').forEach((t) => {
            if (t !== toggle) t.textContent = '▶'
          })

          // Open this video
          videoContainer.style.display = 'block'
          toggle.textContent = '×'
          const iframe = videoContainer.querySelector(
            'iframe'
          ) as HTMLIFrameElement | null
          if (iframe) {
            const originalSrc = iframe.getAttribute('src')
            if (originalSrc) {
              iframe.src = originalSrc.replace('?autoplay=0', '?autoplay=1')
            }
          }
          videoContainer.scrollIntoView({
            behavior: 'smooth',
            block: 'nearest',
          })
        } else {
          // Close this video and stop playback
          const iframe = videoContainer.querySelector(
            'iframe'
          ) as HTMLIFrameElement | null
          if (iframe) {
            iframe.src = ''
          }
          videoContainer.style.display = 'none'
          toggle.textContent = '▶'
        }
      })
    })
  </script>
</Layout>
